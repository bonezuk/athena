#include "remote/inc/RemoteIF.h"

//-------------------------------------------------------------------------------------------
namespace orcus
{
namespace remote
{
//-------------------------------------------------------------------------------------------
#if defined(OMEGA_WIN32) || defined(OMEGA_LINUX)
//-------------------------------------------------------------------------------------------

bool RemoteIF::isServiceAvailable(const QString& name)
{
	bool res = false;

	if(name=="winlirc_remote")
	{
		res = true;
	}
	return res;
}

//-------------------------------------------------------------------------------------------
#endif
//-------------------------------------------------------------------------------------------
// RemoteEvent
//-------------------------------------------------------------------------------------------

RemoteEvent::RemoteEvent()
{}

//-------------------------------------------------------------------------------------------

RemoteEvent::~RemoteEvent()
{}

//-------------------------------------------------------------------------------------------
// RemoteIF
//-------------------------------------------------------------------------------------------

ABSTRACT_FACTORY_CLASS_IMPL(RemoteIFFactory,RemoteIF)

//-------------------------------------------------------------------------------------------

RemoteIF::RemoteIF(QObject *parent) : QObject(parent),
	m_timer(0)
{}

//-------------------------------------------------------------------------------------------

RemoteIF::~RemoteIF()
{}

//-------------------------------------------------------------------------------------------

bool RemoteIF::setupTimer()
{
	freeTimer();
	m_timer = new QTimer(this);
	QObject::connect(m_timer,SIGNAL(timeout()),this,SLOT(onTimer()));
	return true;
}

//-------------------------------------------------------------------------------------------

void RemoteIF::freeTimer()
{
	if(m_timer!=0)
	{
		QObject::disconnect(m_timer,SIGNAL(timeout()),this,SLOT(onTimer()));
		delete m_timer;
		m_timer = 0;
	}
}

//-------------------------------------------------------------------------------------------

void RemoteIF::startTimer()
{
	m_timer->start(100);
}

//-------------------------------------------------------------------------------------------

void RemoteIF::stopTimer()
{
	m_timer->stop();
}

//-------------------------------------------------------------------------------------------

void RemoteIF::onTimer()
{
	onTimerImplementation();
}

//-------------------------------------------------------------------------------------------

void RemoteIF::playPauseClickSignal()
{
	emit playPauseClick();
}

//-------------------------------------------------------------------------------------------

void RemoteIF::previousTrackClickSignal()
{
	emit previousTrackClick();
}

//-------------------------------------------------------------------------------------------

void RemoteIF::nextTrackClickSignal()
{
	emit nextTrackClick();
}

//-------------------------------------------------------------------------------------------

void RemoteIF::seekBackSignal()
{
	emit seekBack();
}

//-------------------------------------------------------------------------------------------

void RemoteIF::seekForwardSignal()
{
	emit seekForward();
}

//-------------------------------------------------------------------------------------------

void RemoteIF::volumeDownIncrementSignal()
{
	emit volumeDownIncrement();
}

//-------------------------------------------------------------------------------------------

void RemoteIF::volumeDownHoldSignal()
{
	emit volumeDownHold();
}

//-------------------------------------------------------------------------------------------

void RemoteIF::volumeUpIncrementSignal()
{
	emit volumeUpIncrement();
}

//-------------------------------------------------------------------------------------------

void RemoteIF::volumeUpHoldSignal()
{
	emit volumeUpHold();
}

//-------------------------------------------------------------------------------------------
}  // namespace remote
}  // namespace orcus
//-------------------------------------------------------------------------------------------
