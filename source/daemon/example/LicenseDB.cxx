#include "licenser/licenselib/inc/LicenseDB.h"

//-------------------------------------------------------------------------------------------
namespace orcus
{
namespace license
{
//-------------------------------------------------------------------------------------------
		
LicenseDB *LicenseDB::m_instance = 0;

//-------------------------------------------------------------------------------------------
		
LicenseDB::LicenseDB() : m_db(0)
{}

//-------------------------------------------------------------------------------------------

LicenseDB::~LicenseDB()
{
	shutdown();
	m_instance = 0;
}

//-------------------------------------------------------------------------------------------

LicenseDB *LicenseDB::instance()
{
	if(m_instance==0)
	{
		QString dbFilename;
		QDir dbDir(QCoreApplication::applicationDirPath());

		dbDir.cdUp();
		dbFilename = dbDir.absoluteFilePath("db/license.db");
		dbFilename = QDir::toNativeSeparators(dbFilename);

		m_instance = new LicenseDB;
		if(!m_instance->init(dbFilename))
		{
			delete m_instance;
			m_instance = 0;
		}
	}
	return m_instance;
}

//-------------------------------------------------------------------------------------------

LicenseDB *LicenseDB::instance(const QString& dbFilename)
{
	if(m_instance==0)
	{
		m_instance = new LicenseDB;
		if(!m_instance->init(dbFilename))
		{
			delete m_instance;
			m_instance = 0;
		}
	}
	return m_instance;
}

//-------------------------------------------------------------------------------------------

bool LicenseDB::init(const QString& dbFileName)
{
	bool res = false;
	
	if(common::DiskOps::path(dbFileName))
	{
		m_db = new orcus::track::db::SQLiteDatabase;
		if(m_db->open(dbFileName))
		{
			if(createSchema())
			{
				res = true;
			}
		}
	}
	return res;
}

//-------------------------------------------------------------------------------------------

void LicenseDB::shutdown()
{
	if(m_db!=0)
	{
		m_db->close();
		delete m_db;
		m_db = 0;
	}
}

//-------------------------------------------------------------------------------------------

bool LicenseDB::createSchema()
{
	bool res = true;
	
	try
	{
		createLicenseTable();
		createProgramTable();
		createHardwareTable();
	}
	catch(const track::db::SQLiteException&)
	{
		res = false;
	}
	return res;
}

//-------------------------------------------------------------------------------------------

int LicenseDB::idOfInserted()
{
	int id = -1;
	QString cmd = "SELECT last_insert_rowid()";
	track::db::SQLiteQuery idQ(m_db);
	
	idQ.prepare(cmd);
	idQ.bind(id);
	idQ.next();
	return id;
}

//-------------------------------------------------------------------------------------------

bool LicenseDB::isTableDefined(const QString& tableName)
{
	QString cmd;
	track::db::SQLiteQuery qTable(m_db);
	
	cmd = "SELECT name FROM sqlite_master WHERE type=\"table\" AND name=\"" + tableName + "\"";
	qTable.prepare(cmd);
	return (qTable.next()) ? true : false;
}

//-------------------------------------------------------------------------------------------
//
// Registration Process
// 1. Download Program and Install
// 2. Program run and no license. => Generate program key and connect to server.
//  a) No license record for given program key. Generate new record and trial certificate.
//  b) Record exists for given program key.
//   i) If license on server then regenerate using given hardware ids and remove old hardware ids.
//   ii) If trial period still valid then produce trial certificate.
//   iii) Otherwise no license. Prompt to enter registration key or quit.
// 3. Program run and license.
//  a) License is valid and no need to contact server.
//  b) Invalid license contact license sever as if no license.
// 4. On enter registration code get license file from server.
//  a) If no server then reschedule at later time.
//  b) Server generates license file, if valid.
//   i) If register record exists for given client registration code.
//   ii) There is an availble number of licenses.
// 5. Deactivate registration code.
//  a) If no server then reschedule at later time.
//  b) Remove programID record and associated hardware.
//
//-------------------------------------------------------------------------------------------

void LicenseDB::createLicenseTable()
{
	if(!isTableDefined("License"))
	{
		QString cmd;
		
		cmd  = "CREATE TABLE License (";
		cmd += "  registerID TEXT NOT NULL PRIMARY KEY,"; // Registration ID generated by license server on RPC call from blackomega.co.uk
		cmd += "  noLicenses INTEGER NOT NULL,"; // The number of licenses associated with register ID.
		cmd += "  creationTime INTEGER NOT NULL,"; // Timestamp of registration.
		cmd += "  customerName TEXT NOT NULL,"; // Name of the customer.
		cmd += "  transactionID TEXT NOT NULL"; // Transaction ID.
		cmd += ");";
		m_db->exec(cmd);
	}
}

//-------------------------------------------------------------------------------------------

void LicenseDB::createProgramTable()
{
	if(!isTableDefined("Program"))
	{
		QString cmd;
		
		cmd  = "CREATE TABLE Program (";
		cmd += "  programID TEXT NOT NULL PRIMARY KEY,"; // Program Key generated by Black Omega
		cmd += "  registerID TEXT NOT NULL,"; // Associated registration ID. -> No registerID then no license.
		cmd += "  creationTime INTEGER NOT NULL,"; // Timestamp of record creation.
		cmd += "  trialTime INTEGER NOT NULL,"; // Timestamp when trial period will end.
		cmd += "  modifiedTime INTEGER NOT NULL"; // Timestamp when last accessed.
		cmd += ");";
		m_db->exec(cmd);
		cmd = "CREATE INDEX registerIDProgramIndex ON Program (registerID)";
		m_db->exec(cmd);
	}
}

//-------------------------------------------------------------------------------------------

void LicenseDB::createHardwareTable()
{
	if(!isTableDefined("Hardware"))
	{
		QString cmd;
		
		cmd  = "CREATE TABLE Hardware (";
		cmd += "  registerID TEXT NOT NULL,"; // Associated registration ID.
		cmd += "  programID TEXT NOT NULL,"; // Associated program ID
		cmd += "  hardwareID TEXT NOT NULL,"; // The hardware ID of a given component.
		cmd += "  PRIMARY KEY(registerID,programID,hardwareID)";
		cmd += ");";
		m_db->exec(cmd);
	}
}

//-------------------------------------------------------------------------------------------
} // namespace license
} // namespace orcus
//-------------------------------------------------------------------------------------------
