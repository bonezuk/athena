#include "engine/whiteomega/inc/Prediction.h"

//-------------------------------------------------------------------------------------------
namespace orcus
{
namespace engine
{
namespace whiteomega
{
//-------------------------------------------------------------------------------------------

Prediction::Prediction() : m_gaConfig(0),
	m_channelL(0),
	m_channelR(0)
{
	tint i;
	
	for(i=0;i<1024;++i)
	{
		resetPredState(&m_stateL[i]);
		resetPredState(&m_stateR[i]);
	}
}

//-------------------------------------------------------------------------------------------

Prediction::~Prediction()
{}

//-------------------------------------------------------------------------------------------

void Prediction::set(GAConfig *cfg,AACDecode *ch)
{
	m_gaConfig = cfg;
	m_channelL = ch;
	m_channelR = 0;
}

//-------------------------------------------------------------------------------------------

void Prediction::set(GAConfig *cfg,AACDecode *chL,AACDecode *chR)
{
	m_gaConfig = cfg;
	m_channelL = chL;
	m_channelR = chR;
}

//-------------------------------------------------------------------------------------------

void Prediction::icPredictionL()
{
	icPrediction(m_channelL,m_stateL);
}

//-------------------------------------------------------------------------------------------

void Prediction::icPredictionR()
{
	icPrediction(m_channelR,m_stateR);
}

//-------------------------------------------------------------------------------------------

void Prediction::pnsResetPredStateL()
{
	pnsResetPredState(m_channelL,m_stateL);
}

//-------------------------------------------------------------------------------------------

void Prediction::pnsResetPredStateR()
{
	pnsResetPredState(m_channelR,m_stateR);
}

//-------------------------------------------------------------------------------------------

void Prediction::resetPredState(State *state)
{
	state->r[0] = 0;
	state->r[1] = 0;
	state->cor[0] = 0;
	state->cor[1] = 0;
	state->var[0] = 0x3f80;
	state->var[1] = 0x3f80;
}

//-------------------------------------------------------------------------------------------

void Prediction::resetAllPred(State *pState)
{
	tint i,frameLen = m_gaConfig->m_frameLength;
	
	for(i=0;i<frameLen;++i)
	{
		resetPredState(&pState[i]);
	}
}

//-------------------------------------------------------------------------------------------

void Prediction::pnsResetPredState(AACDecode *ch,State *pState)
{
	tint i,sfb,g,b,s,e;
	ICSInfo *info = &(ch->m_info);
	
	if(info->windowSequence!=EIGHT_SHORT_SEQUENCE)
	{
		for(g=0;g<info->numWindowGroups;++g)
		{
			for(b=0;b<info->windowGroupLength[g];++b)
			{
				for(sfb=0;sfb<info->maxSfb;++sfb)
				{
					if(info->sfbCb[g][sfb]==NOISE_HCB)
					{
						s = info->swbOffset[sfb];
						e = minV(info->swbOffset[sfb+1],info->swbOffsetMax);
						for(i=s;i<e;++i)
						{
							resetPredState(&pState[i]);
						}
					}
				}
			}
		}
	}
}

//-------------------------------------------------------------------------------------------

tint16 Prediction::quantPred(sample_t x)
{
	tint16 q;
	tfloat32 r = static_cast<tfloat32>(x);
	tuint32 *y = reinterpret_cast<tuint32 *>(&r);
	q = static_cast<tint16>(*y >> 16);
	return q;
}

//-------------------------------------------------------------------------------------------

sample_t Prediction::quadPredInv(tint16 q)
{
	tfloat32 x;
	tuint32 *y = reinterpret_cast<tuint32 *>(&x);
	*y = static_cast<tuint32>(q) << 16;
	return static_cast<sample_t>(x);
}

//-------------------------------------------------------------------------------------------

void Prediction::round(sample_t *r)
{
	tuint32 a,b,c;
	tfloat32 xA = static_cast<tfloat32>(*r);
	tfloat32 *x = &xA;
	tuint32 *y = reinterpret_cast<tuint32 *>(x);
	
	a = *y;
	if(a & 0x00008000)
	{
		b = a & 0xffff0000;
		c = (a & 0xff800000) | 0x00010000;
		a &= 0xff800000;
		*x = *(reinterpret_cast<tfloat32 *>(&b)) + *(reinterpret_cast<tfloat32 *>(&c)) - *(reinterpret_cast<tfloat32 *>(&a));
	}
	else
	{
		a &= 0xffff0000;
		*y = a;
	}
	*r = static_cast<sample_t>(*x);
}

//-------------------------------------------------------------------------------------------

void Prediction::icPredict(State *state,sample_t input,sample_t *output,tint pred)
{
#if defined(SINGLE_FLOAT_SAMPLE)
	const sample_t c_Alpha = 0.90625f;
	const sample_t c_A = 0.953125f;
#else
	const sample_t c_Alpha = 0.90625;
	const sample_t c_A = 0.953125;
#endif

	tuint16 tmp;
	tint16 i,j;
	sample_t e0, e1, k1, k2, dr1, predictedvalue;
	sample_t r[2],cor[2],var[2];
	
	r[0] = quadPredInv(state->r[0]);
	r[1] = quadPredInv(state->r[1]);
	cor[0] = quadPredInv(state->cor[0]);
	cor[1] = quadPredInv(state->cor[1]);
	var[0] = quadPredInv(state->var[0]);
	var[1] = quadPredInv(state->var[1]);
	
	tmp = state->var[0];
	j = tmp >> 7;
	i = tmp & 0x007f;
	if(j>=128)
	{
		j -= 128;
		k1 = cor[0] * m_expTable[j] * m_mntTable[i];
	}
	else
	{
		k1 = c_zeroSample;
	}
	
	if(pred)
	{
		tmp = state->var[1];
		j = (tmp >> 7);
		i = tmp & 0x007f;
		if(j>=128)
		{
			j -= 128;
			k2 = cor[1] * m_expTable[j] * m_mntTable[i];
		}
		else
		{
			k2 = c_zeroSample;
		}
		
		predictedvalue = (k1 * r[0]) + (k2 * r[1]);
		round(&predictedvalue);
		*output = input + predictedvalue;
	}
	
	e0 = *output;
	e1 = e0 - (k1 * r[0]);
	dr1 = k1 * e0;

	var[0] = (c_Alpha * var[0]) + (c_halfSample * ((r[0] * r[0]) + (e0 * e0)));
	cor[0] = (c_Alpha * cor[0]) + (r[0] * e0);
	var[1] = (c_Alpha * var[1]) + (c_halfSample * ((r[1] * r[1]) + (e1 * e1)));
	cor[1] = (c_Alpha * cor[1]) + (r[1] * e1);
	
	r[1] = c_A * (r[0] - dr1);
	r[0] = c_A * e0;
	
	state->r[0] = quantPred(r[0]);
	state->r[1] = quantPred(r[1]);
	state->cor[0] = quantPred(cor[0]);
	state->cor[1] = quantPred(cor[1]);
	state->var[0] = quantPred(var[0]);
	state->var[1] = quantPred(var[1]);
}

//-------------------------------------------------------------------------------------------

void Prediction::icPrediction(AACDecode *ch,State *pState)
{
	ICSInfo *info = &(ch->m_info);
	sample_t *spec = ch->m_spectralCoef;
	
	if(info->windowSequence==EIGHT_SHORT_SEQUENCE)
	{
		resetAllPred(pState);
	}
	else
	{
		tint sfb,bin,max = maxPredSfb(m_gaConfig->m_samplingFrequencyIndex);
		
		if(info->pred.predictorDataPresent)
		{
			for(sfb=0;sfb<max;++sfb)
			{
				tint low,high,pred;
			
				low = info->swbOffset[sfb];
				high = minV(info->swbOffset[sfb+1],info->swbOffsetMax);
				pred = info->pred.predictionUsed[sfb];
			
				for(bin=low;bin<high;++bin)
				{
					icPredict(&pState[bin],spec[bin],&spec[bin],pred);
				}
			}
			
			if(info->pred.predictorReset)
			{
				for(bin=info->pred.predictorResetGroupNumber-1;bin<m_gaConfig->m_frameLength;bin+=30)
				{
					resetPredState(&pState[bin]);
				}
			}
		}
	}
}

//-------------------------------------------------------------------------------------------
#if defined(SINGLE_FLOAT_SAMPLE)
//-------------------------------------------------------------------------------------------

const sample_t Prediction::m_mntTable[128] = {
	0.9531250000f, 0.9453125000f, 0.9375000000f, 0.9296875000f,
	0.9257812500f, 0.9179687500f, 0.9101562500f, 0.9023437500f,
	0.8984375000f, 0.8906250000f, 0.8828125000f, 0.8789062500f,
	0.8710937500f, 0.8671875000f, 0.8593750000f, 0.8515625000f,
	0.8476562500f, 0.8398437500f, 0.8359375000f, 0.8281250000f,
	0.8242187500f, 0.8203125000f, 0.8125000000f, 0.8085937500f,
	0.8007812500f, 0.7968750000f, 0.7929687500f, 0.7851562500f,
	0.7812500000f, 0.7773437500f, 0.7734375000f, 0.7656250000f,
	0.7617187500f, 0.7578125000f, 0.7539062500f, 0.7500000000f,
	0.7421875000f, 0.7382812500f, 0.7343750000f, 0.7304687500f,
	0.7265625000f, 0.7226562500f, 0.7187500000f, 0.7148437500f,
	0.7109375000f, 0.7070312500f, 0.6992187500f, 0.6953125000f,
	0.6914062500f, 0.6875000000f, 0.6835937500f, 0.6796875000f,
	0.6796875000f, 0.6757812500f, 0.6718750000f, 0.6679687500f,
	0.6640625000f, 0.6601562500f, 0.6562500000f, 0.6523437500f,
	0.6484375000f, 0.6445312500f, 0.6406250000f, 0.6406250000f,
	0.6367187500f, 0.6328125000f, 0.6289062500f, 0.6250000000f,
	0.6210937500f, 0.6210937500f, 0.6171875000f, 0.6132812500f,
	0.6093750000f, 0.6054687500f, 0.6054687500f, 0.6015625000f,
	0.5976562500f, 0.5937500000f, 0.5937500000f, 0.5898437500f,
	0.5859375000f, 0.5820312500f, 0.5820312500f, 0.5781250000f,
	0.5742187500f, 0.5742187500f, 0.5703125000f, 0.5664062500f,
	0.5664062500f, 0.5625000000f, 0.5585937500f, 0.5585937500f,
	0.5546875000f, 0.5507812500f, 0.5507812500f, 0.5468750000f,
	0.5429687500f, 0.5429687500f, 0.5390625000f, 0.5390625000f,
	0.5351562500f, 0.5312500000f, 0.5312500000f, 0.5273437500f,
	0.5273437500f, 0.5234375000f, 0.5195312500f, 0.5195312500f,
	0.5156250000f, 0.5156250000f, 0.5117187500f, 0.5117187500f,
	0.5078125000f, 0.5078125000f, 0.5039062500f, 0.5039062500f,
	0.5000000000f, 0.4980468750f, 0.4960937500f, 0.4941406250f,
	0.4921875000f, 0.4902343750f, 0.4882812500f, 0.4863281250f,
	0.4843750000f, 0.4824218750f, 0.4804687500f, 0.4785156250f
};

//-------------------------------------------------------------------------------------------

const sample_t Prediction::m_expTable[128] = {
	0.50000000000000000000000000000000000000000000000000f,
	0.25000000000000000000000000000000000000000000000000f,
	0.12500000000000000000000000000000000000000000000000f,
	0.06250000000000000000000000000000000000000000000000f,
	0.03125000000000000000000000000000000000000000000000f,
	0.01562500000000000000000000000000000000000000000000f,
	0.00781250000000000000000000000000000000000000000000f,
	0.00390625000000000000000000000000000000000000000000f,
	0.00195312500000000000000000000000000000000000000000f,
	0.00097656250000000000000000000000000000000000000000f,
	0.00048828125000000000000000000000000000000000000000f,
	0.00024414062500000000000000000000000000000000000000f,
	0.00012207031250000000000000000000000000000000000000f,
	0.00006103515625000000000000000000000000000000000000f,
	0.00003051757812500000000000000000000000000000000000f,
	0.00001525878906250000000000000000000000000000000000f,
	0.00000762939453125000000000000000000000000000000000f,
	0.00000381469726562500000000000000000000000000000000f,
	0.00000190734863281250000000000000000000000000000000f,
	0.00000095367431640625000000000000000000000000000000f,
	0.00000047683715820312500000000000000000000000000000f,
	0.00000023841857910156250000000000000000000000000000f,
	0.00000011920928955078125000000000000000000000000000f,
	0.00000005960464477539062500000000000000000000000000f,
	0.00000002980232238769531300000000000000000000000000f,
	0.00000001490116119384765600000000000000000000000000f,
	0.00000000745058059692382810000000000000000000000000f,
	0.00000000372529029846191410000000000000000000000000f,
	0.00000000186264514923095700000000000000000000000000f,
	0.00000000093132257461547852000000000000000000000000f,
	0.00000000046566128730773926000000000000000000000000f,
	0.00000000023283064365386963000000000000000000000000f,
	0.00000000011641532182693481000000000000000000000000f,
	0.00000000005820766091346740700000000000000000000000f,
	0.00000000002910383045673370400000000000000000000000f,
	0.00000000001455191522836685200000000000000000000000f,
	0.00000000000727595761418342590000000000000000000000f,
	0.00000000000363797880709171300000000000000000000000f,
	0.00000000000181898940354585650000000000000000000000f,
	0.00000000000090949470177292824000000000000000000000f,
	0.00000000000045474735088646412000000000000000000000f,
	0.00000000000022737367544323206000000000000000000000f,
	0.00000000000011368683772161603000000000000000000000f,
	0.00000000000005684341886080801500000000000000000000f,
	0.00000000000002842170943040400700000000000000000000f,
	0.00000000000001421085471520200400000000000000000000f,
	0.00000000000000710542735760100190000000000000000000f,
	0.00000000000000355271367880050090000000000000000000f,
	0.00000000000000177635683940025050000000000000000000f,
	0.00000000000000088817841970012523000000000000000000f,
	0.00000000000000044408920985006262000000000000000000f,
	0.00000000000000022204460492503131000000000000000000f,
	0.00000000000000011102230246251565000000000000000000f,
	0.00000000000000005551115123125782700000000000000000f,
	0.00000000000000002775557561562891400000000000000000f,
	0.00000000000000001387778780781445700000000000000000f,
	0.00000000000000000693889390390722840000000000000000f,
	0.00000000000000000346944695195361420000000000000000f,
	0.00000000000000000173472347597680710000000000000000f,
	0.00000000000000000086736173798840355000000000000000f,
	0.00000000000000000043368086899420177000000000000000f,
	0.00000000000000000021684043449710089000000000000000f,
	0.00000000000000000010842021724855044000000000000000f,
	0.00000000000000000005421010862427522200000000000000f,
	0.00000000000000000002710505431213761100000000000000f,
	0.00000000000000000001355252715606880500000000000000f,
	0.00000000000000000000677626357803440270000000000000f,
	0.00000000000000000000338813178901720140000000000000f,
	0.00000000000000000000169406589450860070000000000000f,
	0.00000000000000000000084703294725430034000000000000f,
	0.00000000000000000000042351647362715017000000000000f,
	0.00000000000000000000021175823681357508000000000000f,
	0.00000000000000000000010587911840678754000000000000f,
	0.00000000000000000000005293955920339377100000000000f,
	0.00000000000000000000002646977960169688600000000000f,
	0.00000000000000000000001323488980084844300000000000f,
	0.00000000000000000000000661744490042422140000000000f,
	0.00000000000000000000000330872245021211070000000000f,
	0.00000000000000000000000165436122510605530000000000f,
	0.00000000000000000000000082718061255302767000000000f,
	0.00000000000000000000000041359030627651384000000000f,
	0.00000000000000000000000020679515313825692000000000f,
	0.00000000000000000000000010339757656912846000000000f,
	0.00000000000000000000000005169878828456423000000000f,
	0.00000000000000000000000002584939414228211500000000f,
	0.00000000000000000000000001292469707114105700000000f,
	0.00000000000000000000000000646234853557052870000000f,
	0.00000000000000000000000000323117426778526440000000f,
	0.00000000000000000000000000161558713389263220000000f,
	0.00000000000000000000000000080779356694631609000000f,
	0.00000000000000000000000000040389678347315804000000f,
	0.00000000000000000000000000020194839173657902000000f,
	0.00000000000000000000000000010097419586828951000000f,
	0.00000000000000000000000000005048709793414475600000f,
	0.00000000000000000000000000002524354896707237800000f,
	0.00000000000000000000000000001262177448353618900000f,
	0.00000000000000000000000000000631088724176809440000f,
	0.00000000000000000000000000000315544362088404720000f,
	0.00000000000000000000000000000157772181044202360000f,
	0.00000000000000000000000000000078886090522101181000f,
	0.00000000000000000000000000000039443045261050590000f,
	0.00000000000000000000000000000019721522630525295000f,
	0.00000000000000000000000000000009860761315262647600f,
	0.00000000000000000000000000000004930380657631323800f,
	0.00000000000000000000000000000002465190328815661900f,
	0.00000000000000000000000000000001232595164407830900f,
	0.00000000000000000000000000000000616297582203915470f,
	0.00000000000000000000000000000000308148791101957740f,
	0.00000000000000000000000000000000154074395550978870f,
	0.00000000000000000000000000000000077037197775489434f,
	0.00000000000000000000000000000000038518598887744717f,
	0.00000000000000000000000000000000019259299443872359f,
	0.00000000000000000000000000000000009629649721936179f,
	0.00000000000000000000000000000000004814824860968090f,
	0.00000000000000000000000000000000002407412430484045f,
	0.00000000000000000000000000000000001203706215242022f,
	0.00000000000000000000000000000000000601853107621011f,
	0.00000000000000000000000000000000000300926553810506f,
	0.00000000000000000000000000000000000150463276905253f,
	0.00000000000000000000000000000000000075231638452626f,
	0.00000000000000000000000000000000000037615819226313f,
	0.00000000000000000000000000000000000018807909613157f,
	0.00000000000000000000000000000000000009403954806578f,
	0.00000000000000000000000000000000000004701977403289f,
	0.00000000000000000000000000000000000002350988701645f,
	0.00000000000000000000000000000000000001175494350822f,
	0.0f,
	0.0f
};

//-------------------------------------------------------------------------------------------
#else
//-------------------------------------------------------------------------------------------

const sample_t Prediction::m_mntTable[128] = {
	0.9531250000, 0.9453125000, 0.9375000000, 0.9296875000,
	0.9257812500, 0.9179687500, 0.9101562500, 0.9023437500,
	0.8984375000, 0.8906250000, 0.8828125000, 0.8789062500,
	0.8710937500, 0.8671875000, 0.8593750000, 0.8515625000,
	0.8476562500, 0.8398437500, 0.8359375000, 0.8281250000,
	0.8242187500, 0.8203125000, 0.8125000000, 0.8085937500,
	0.8007812500, 0.7968750000, 0.7929687500, 0.7851562500,
	0.7812500000, 0.7773437500, 0.7734375000, 0.7656250000,
	0.7617187500, 0.7578125000, 0.7539062500, 0.7500000000,
	0.7421875000, 0.7382812500, 0.7343750000, 0.7304687500,
	0.7265625000, 0.7226562500, 0.7187500000, 0.7148437500,
	0.7109375000, 0.7070312500, 0.6992187500, 0.6953125000,
	0.6914062500, 0.6875000000, 0.6835937500, 0.6796875000,
	0.6796875000, 0.6757812500, 0.6718750000, 0.6679687500,
	0.6640625000, 0.6601562500, 0.6562500000, 0.6523437500,
	0.6484375000, 0.6445312500, 0.6406250000, 0.6406250000,
	0.6367187500, 0.6328125000, 0.6289062500, 0.6250000000,
	0.6210937500, 0.6210937500, 0.6171875000, 0.6132812500,
	0.6093750000, 0.6054687500, 0.6054687500, 0.6015625000,
	0.5976562500, 0.5937500000, 0.5937500000, 0.5898437500,
	0.5859375000, 0.5820312500, 0.5820312500, 0.5781250000,
	0.5742187500, 0.5742187500, 0.5703125000, 0.5664062500,
	0.5664062500, 0.5625000000, 0.5585937500, 0.5585937500,
	0.5546875000, 0.5507812500, 0.5507812500, 0.5468750000,
	0.5429687500, 0.5429687500, 0.5390625000, 0.5390625000,
	0.5351562500, 0.5312500000, 0.5312500000, 0.5273437500,
	0.5273437500, 0.5234375000, 0.5195312500, 0.5195312500,
	0.5156250000, 0.5156250000, 0.5117187500, 0.5117187500,
	0.5078125000, 0.5078125000, 0.5039062500, 0.5039062500,
	0.5000000000, 0.4980468750, 0.4960937500, 0.4941406250,
	0.4921875000, 0.4902343750, 0.4882812500, 0.4863281250,
	0.4843750000, 0.4824218750, 0.4804687500, 0.4785156250
};

//-------------------------------------------------------------------------------------------

const sample_t Prediction::m_expTable[128] = {
	0.50000000000000000000000000000000000000000000000000,
	0.25000000000000000000000000000000000000000000000000,
	0.12500000000000000000000000000000000000000000000000,
	0.06250000000000000000000000000000000000000000000000,
	0.03125000000000000000000000000000000000000000000000,
	0.01562500000000000000000000000000000000000000000000,
	0.00781250000000000000000000000000000000000000000000,
	0.00390625000000000000000000000000000000000000000000,
	0.00195312500000000000000000000000000000000000000000,
	0.00097656250000000000000000000000000000000000000000,
	0.00048828125000000000000000000000000000000000000000,
	0.00024414062500000000000000000000000000000000000000,
	0.00012207031250000000000000000000000000000000000000,
	0.00006103515625000000000000000000000000000000000000,
	0.00003051757812500000000000000000000000000000000000,
	0.00001525878906250000000000000000000000000000000000,
	0.00000762939453125000000000000000000000000000000000,
	0.00000381469726562500000000000000000000000000000000,
	0.00000190734863281250000000000000000000000000000000,
	0.00000095367431640625000000000000000000000000000000,
	0.00000047683715820312500000000000000000000000000000,
	0.00000023841857910156250000000000000000000000000000,
	0.00000011920928955078125000000000000000000000000000,
	0.00000005960464477539062500000000000000000000000000,
	0.00000002980232238769531300000000000000000000000000,
	0.00000001490116119384765600000000000000000000000000,
	0.00000000745058059692382810000000000000000000000000,
	0.00000000372529029846191410000000000000000000000000,
	0.00000000186264514923095700000000000000000000000000,
	0.00000000093132257461547852000000000000000000000000,
	0.00000000046566128730773926000000000000000000000000,
	0.00000000023283064365386963000000000000000000000000,
	0.00000000011641532182693481000000000000000000000000,
	0.00000000005820766091346740700000000000000000000000,
	0.00000000002910383045673370400000000000000000000000,
	0.00000000001455191522836685200000000000000000000000,
	0.00000000000727595761418342590000000000000000000000,
	0.00000000000363797880709171300000000000000000000000,
	0.00000000000181898940354585650000000000000000000000,
	0.00000000000090949470177292824000000000000000000000,
	0.00000000000045474735088646412000000000000000000000,
	0.00000000000022737367544323206000000000000000000000,
	0.00000000000011368683772161603000000000000000000000,
	0.00000000000005684341886080801500000000000000000000,
	0.00000000000002842170943040400700000000000000000000,
	0.00000000000001421085471520200400000000000000000000,
	0.00000000000000710542735760100190000000000000000000,
	0.00000000000000355271367880050090000000000000000000,
	0.00000000000000177635683940025050000000000000000000,
	0.00000000000000088817841970012523000000000000000000,
	0.00000000000000044408920985006262000000000000000000,
	0.00000000000000022204460492503131000000000000000000,
	0.00000000000000011102230246251565000000000000000000,
	0.00000000000000005551115123125782700000000000000000,
	0.00000000000000002775557561562891400000000000000000,
	0.00000000000000001387778780781445700000000000000000,
	0.00000000000000000693889390390722840000000000000000,
	0.00000000000000000346944695195361420000000000000000,
	0.00000000000000000173472347597680710000000000000000,
	0.00000000000000000086736173798840355000000000000000,
	0.00000000000000000043368086899420177000000000000000,
	0.00000000000000000021684043449710089000000000000000,
	0.00000000000000000010842021724855044000000000000000,
	0.00000000000000000005421010862427522200000000000000,
	0.00000000000000000002710505431213761100000000000000,
	0.00000000000000000001355252715606880500000000000000,
	0.00000000000000000000677626357803440270000000000000,
	0.00000000000000000000338813178901720140000000000000,
	0.00000000000000000000169406589450860070000000000000,
	0.00000000000000000000084703294725430034000000000000,
	0.00000000000000000000042351647362715017000000000000,
	0.00000000000000000000021175823681357508000000000000,
	0.00000000000000000000010587911840678754000000000000,
	0.00000000000000000000005293955920339377100000000000,
	0.00000000000000000000002646977960169688600000000000,
	0.00000000000000000000001323488980084844300000000000,
	0.00000000000000000000000661744490042422140000000000,
	0.00000000000000000000000330872245021211070000000000,
	0.00000000000000000000000165436122510605530000000000,
	0.00000000000000000000000082718061255302767000000000,
	0.00000000000000000000000041359030627651384000000000,
	0.00000000000000000000000020679515313825692000000000,
	0.00000000000000000000000010339757656912846000000000,
	0.00000000000000000000000005169878828456423000000000,
	0.00000000000000000000000002584939414228211500000000,
	0.00000000000000000000000001292469707114105700000000,
	0.00000000000000000000000000646234853557052870000000,
	0.00000000000000000000000000323117426778526440000000,
	0.00000000000000000000000000161558713389263220000000,
	0.00000000000000000000000000080779356694631609000000,
	0.00000000000000000000000000040389678347315804000000,
	0.00000000000000000000000000020194839173657902000000,
	0.00000000000000000000000000010097419586828951000000,
	0.00000000000000000000000000005048709793414475600000,
	0.00000000000000000000000000002524354896707237800000,
	0.00000000000000000000000000001262177448353618900000,
	0.00000000000000000000000000000631088724176809440000,
	0.00000000000000000000000000000315544362088404720000,
	0.00000000000000000000000000000157772181044202360000,
	0.00000000000000000000000000000078886090522101181000,
	0.00000000000000000000000000000039443045261050590000,
	0.00000000000000000000000000000019721522630525295000,
	0.00000000000000000000000000000009860761315262647600,
	0.00000000000000000000000000000004930380657631323800,
	0.00000000000000000000000000000002465190328815661900,
	0.00000000000000000000000000000001232595164407830900,
	0.00000000000000000000000000000000616297582203915470,
	0.00000000000000000000000000000000308148791101957740,
	0.00000000000000000000000000000000154074395550978870,
	0.00000000000000000000000000000000077037197775489434,
	0.00000000000000000000000000000000038518598887744717,
	0.00000000000000000000000000000000019259299443872359,
	0.00000000000000000000000000000000009629649721936179,
	0.00000000000000000000000000000000004814824860968090,
	0.00000000000000000000000000000000002407412430484045,
	0.00000000000000000000000000000000001203706215242022,
	0.00000000000000000000000000000000000601853107621011,
	0.00000000000000000000000000000000000300926553810506,
	0.00000000000000000000000000000000000150463276905253,
	0.00000000000000000000000000000000000075231638452626,
	0.00000000000000000000000000000000000037615819226313,
	0.00000000000000000000000000000000000018807909613157,
	0.00000000000000000000000000000000000009403954806578,
	0.00000000000000000000000000000000000004701977403289,
	0.00000000000000000000000000000000000002350988701645,
	0.00000000000000000000000000000000000001175494350822,
	0.0,
	0.0
};

//-------------------------------------------------------------------------------------------
#endif
//-------------------------------------------------------------------------------------------
} // namespace whiteomega
} // namespace engine
} // namespace orcus
//-------------------------------------------------------------------------------------------


