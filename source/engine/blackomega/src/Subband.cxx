#include "engine/blackomega/inc/Subband.h"

//-------------------------------------------------------------------------------------------
namespace orcus
{
namespace engine
{
namespace blackomega
{
//-------------------------------------------------------------------------------------------

static tfloat64 g_intwinbase[258] = {
	     0.0,    -1.0,    -1.0,    -1.0,    -1.0,    -1.0,    -1.0,    -2.0,    -2.0,    -2.0,		//10
	    -2.0,    -3.0,    -3.0,    -4.0,    -4.0,    -5.0,    -5.0,    -6.0,    -7.0,    -7.0,		//20
	    -8.0,    -9.0,   -10.0,   -11.0,   -13.0,   -14.0,   -16.0,   -17.0,   -19.0,   -21.0,		//30
	   -24.0,   -26.0,   -29.0,   -31.0,   -35.0,   -38.0,   -41.0,   -45.0,   -49.0,   -53.0,		//40
	   -58.0,   -63.0,   -68.0,   -73.0,   -79.0,   -85.0,   -91.0,   -97.0,  -104.0,  -111.0,		//50
	  -117.0,  -125.0,  -132.0,  -139.0,  -147.0,  -154.0,  -161.0,  -169.0,  -176.0,  -183.0,		//60
	  -190.0,  -196.0,  -202.0,  -208.0,  -213.0,  -218.0,  -222.0,  -225.0,  -227.0,  -228.0,		//70
	  -228.0,  -227.0,  -224.0,  -221.0,  -215.0,  -208.0,  -200.0,  -189.0,  -177.0,  -163.0,		//80
	  -146.0,  -127.0,  -106.0,   -83.0,   -57.0,   -29.0,     2.0,    36.0,    72.0,   111.0,		//90
	   153.0,   197.0,   244.0,   294.0,   347.0,   401.0,   459.0,   519.0,   581.0,   645.0,		//100
	   711.0,   779.0,   848.0,   919.0,   991.0,  1064.0,  1137.0,  1210.0,  1283.0,  1356.0,		//110
	  1428.0,  1498.0,  1567.0,  1634.0,  1698.0,  1759.0,  1817.0,  1870.0,  1919.0,  1962.0,		//120
	  2001.0,  2032.0,  2057.0,  2075.0,  2085.0,  2087.0,  2080.0,  2063.0,  2037.0,  2000.0,		//130
	  1952.0,  1893.0,  1822.0,  1739.0,  1644.0,  1535.0,  1414.0,  1280.0,  1131.0,   970.0,		//140
	   794.0,   605.0,   402.0,   185.0,   -45.0,  -288.0,  -545.0,  -814.0, -1095.0, -1388.0,		//150
	 -1692.0, -2006.0, -2330.0, -2663.0, -3004.0, -3351.0, -3705.0, -4063.0, -4425.0, -4788.0,		//160
	 -5153.0, -5517.0, -5879.0, -6237.0, -6589.0, -6935.0, -7271.0, -7597.0, -7910.0, -8209.0,		//170
	 -8491.0, -8755.0, -8998.0, -9219.0, -9416.0, -9585.0, -9727.0, -9838.0, -9916.0, -9959.0,		//180
	 -9966.0, -9935.0, -9863.0, -9750.0, -9592.0, -9389.0, -9139.0, -8840.0, -8492.0, -8092.0,		//190
	 -7640.0, -7134.0, -6574.0, -5959.0, -5288.0, -4561.0, -3776.0, -2935.0, -2037.0, -1082.0,		//200
	   -70.0,   998.0,  2122.0,  3300.0,  4533.0,  5818.0,  7154.0,  8540.0,  9975.0, 11455.0,		//210
	 12980.0, 14548.0, 16155.0, 17799.0, 19478.0, 21189.0, 22929.0, 24694.0, 26482.0, 28289.0,		//220
	 30112.0, 31947.0, 33791.0, 35640.0, 37489.0, 39336.0, 41176.0, 43006.0, 44821.0, 46617.0,		//230
	 48390.0, 50137.0, 51853.0, 53534.0, 55178.0, 56778.0, 58333.0, 59838.0, 61289.0, 62684.0,		//240
	 64019.0, 65290.0, 66494.0, 67629.0, 68692.0, 69679.0, 70590.0, 71420.0, 72169.0, 72835.0,		//250
	 73415.0, 73908.0, 74313.0, 74630.0, 74856.0, 74992.0, 75038.0									//258
};

//-------------------------------------------------------------------------------------------

sample_t *Subband::m_decWindowA = 0;
sample_t *Subband::m_decWindowB = 0;

common::Allocation *Subband::m_subbandAlloc = 0;

//-------------------------------------------------------------------------------------------

Subband::Subband() : m_alloc(),
	m_dctFunction(0),
	m_windowFunction(0),
	m_bo(1),
	m_synthBuffs(0),
	m_dBuffer(0)
{
	init();
}

//-------------------------------------------------------------------------------------------

Subband::~Subband()
{
	try
	{
		m_alloc.FreeAll();
	}
	catch(...) {}
}

//-------------------------------------------------------------------------------------------

void Subband::start()
{
	makeDecodeTables(32767);
}

//-------------------------------------------------------------------------------------------

void Subband::stop()
{
	freeDecodeTables();
}

//-------------------------------------------------------------------------------------------

void Subband::makeDecodeTables(tint scaleval)
{
	tint i,j;
	sample_t *table;
	
	if(m_decWindowA!=0 && m_decWindowB!=0)
	{
		return;
	}
	
	m_decWindowA = new sample_t [512 + 32];
	m_decWindowB = new sample_t [512 + 32];
	
	table = m_decWindowA;
	scaleval = -scaleval;
	
	for(i=0,j=0;i<256;++i,++j,table+=32)
	{
		if(table < (m_decWindowA + 512 + 16))
		{
			table[16] = table[0] = static_cast<sample_t>((g_intwinbase[j] / MAX_CEILING * static_cast<tfloat64>(scaleval)) / 32768.0);
		}
		if((i%32)==31)
		{
			table -= 1023;
		}
		if((i%64)==63)
		{
			scaleval = -scaleval;
		}
	}
	
	for(;i<512;++i,--j,table+=32)
	{
		if(table < (m_decWindowA + 512 + 16))
		{
			table[16] = table[0] = static_cast<sample_t>((g_intwinbase[j] / MAX_CEILING * static_cast<tfloat64>(scaleval)) / 32768.0);
		}
		if((i%32)==31)
		{
			table -= 1023;
		}
		if((i%64)==63)
		{
			scaleval = -scaleval;
		}
	}
	
	for(i=0;i<542;++i)
	{
		if(i & 0x00000001)
		{
			m_decWindowB[i] = m_decWindowA[i];
		}
		else
		{
			m_decWindowB[i] = -m_decWindowA[i];
		}
	}
}

//-------------------------------------------------------------------------------------------

void Subband::freeDecodeTables()
{
	if(m_decWindowA!=0)
	{
		delete [] m_decWindowA;
		m_decWindowA = 0;
	}
	if(m_decWindowB!=0)
	{
		delete [] m_decWindowB;
		m_decWindowB = 0;
	}
}

//-------------------------------------------------------------------------------------------

void Subband::init()
{
	m_bo = 1;
	m_dBuffer = reinterpret_cast<sample_t *>(m_alloc.MemAllocAlign(76,sizeof(sample_t),16));
	m_synthBuffs = reinterpret_cast<sample_t *>(m_alloc.MemAllocAlign(2 * 2 * 0x110,sizeof(sample_t),16));
	reset();

	m_dctFunction = Subband::dct;
	m_windowFunction = Subband::window;
}

//-------------------------------------------------------------------------------------------

void Subband::reset()
{
	tint i,j,k;
	
	m_bo = 1;
	for(k=0;k<2;++k)
	{
		for(i=0;i<2;++i)
		{
			for(j=0;j<0x110;++j)
			{
				m_synthBuffs[(((k << 1) + i) * 0x110) + j] = 0.0;
			}
		}
	}
}

//-------------------------------------------------------------------------------------------

void Subband::synthesis(sample_t *bandPtr,sample_t *samples)
{
	Band::instance();
	sample_t *b0;
	tint bo1;
	
	m_bo--;
	m_bo &= 0x0000000f;
	
	if(m_bo & 0x00000001)
	{
		b0 = m_synthBuffs;
		bo1 = m_bo;
		m_dctFunction(&m_synthBuffs[0x110]+((m_bo+1) & 0x0000000f),&m_synthBuffs[0]+m_bo,bandPtr,m_dBuffer);
		
	}
	else
	{
		b0 = &m_synthBuffs[0x110];
		bo1 = m_bo + 1;
		m_dctFunction(&m_synthBuffs[0]+m_bo,&m_synthBuffs[0x110]+m_bo+1,bandPtr,m_dBuffer);
	}
	m_windowFunction(b0,bo1,samples);
}

//-------------------------------------------------------------------------------------------

void Subband::dct(sample_t *aOut,sample_t *bOut,sample_t *inMem,sample_t *y)
{
	{
		sample_t *x = inMem;

		y[0]=x[0]+x[31];
		y[1]=x[2]+x[29];
		y[2]=x[4]+x[27];
		y[3]=x[6]+x[25];
		y[4]=x[8]+x[23];
		y[5]=x[10]+x[21];
		y[6]=x[12]+x[19];
		y[7]=x[14]+x[17];
		y[8]=x[16]+x[15];
		y[9]=x[18]+x[13];
		y[10]=x[20]+x[11];
		y[11]=x[22]+x[9];
		y[12]=x[24]+x[7];
		y[13]=x[26]+x[5];
		y[14]=x[28]+x[3];
		y[15]=x[30]+x[1];

		y[16]=(x[0]-x[31])*D32_1_1;
		y[17]=(x[2]-x[29])*D32_1_2;
		y[18]=(x[4]-x[27])*D32_1_3;
		y[19]=(x[6]-x[25])*D32_1_4;
		y[20]=(x[8]-x[23])*D32_1_5;
		y[21]=(x[10]-x[21])*D32_1_6;
		y[22]=(x[12]-x[19])*D32_1_7;
		y[23]=(x[14]-x[17])*D32_1_8;
		y[24]=(x[16]-x[15])*D32_1_9;
		y[25]=(x[18]-x[13])*D32_1_10;
		y[26]=(x[20]-x[11])*D32_1_11;
		y[27]=(x[22]-x[9])*D32_1_12;
		y[28]=(x[24]-x[7])*D32_1_13;
		y[29]=(x[26]-x[5])*D32_1_14;
		y[30]=(x[28]-x[3])*D32_1_15;
		y[31]=(x[30]-x[1])*D32_1_16;
	}

	{
        sample_t *a=aOut,*b=bOut;

		y[32]=y[0]+y[8];
		y[33]=y[1]+y[9];
		y[34]=y[2]+y[10];
		y[35]=y[3]+y[11];
		y[36]=y[4]+y[12];
		y[37]=y[5]+y[13];
		y[38]=y[6]+y[14];
		y[39]=y[7]+y[15];

		y[40]=(y[0]-y[8])*D16_1_1;
		y[41]=(y[1]-y[9])*D16_1_2;
		y[42]=(y[2]-y[10])*D16_1_3;
		y[43]=(y[3]-y[11])*D16_1_4;
		y[44]=(y[4]-y[12])*D16_1_5;
		y[45]=(y[5]-y[13])*D16_1_6;
	 	y[46]=(y[6]-y[14])*D16_1_7;
		y[47]=(y[7]-y[15])*D16_1_8;

		y[48]=y[32]+y[36];
		y[49]=y[33]+y[37];
		y[50]=y[34]+y[38];
		y[51]=y[35]+y[39];
		y[52]=(y[32]-y[36])*D8_1_1;
		y[53]=(y[33]-y[37])*D8_1_2;
		y[54]=(y[34]-y[38])*D8_1_3;
		y[55]=(y[35]-y[39])*D8_1_4;

		y[56]=y[48]+y[50];
		y[57]=y[49]+y[51];
		y[60]=(y[48]-y[50])*D4_1_1;
		y[61]=(y[49]-y[51])*D4_1_2;

		a[256]=y[56]+y[57];
		b[0]=a[0]=(y[56]-y[57])*D4_1_3;
		a[128]=y[60]+y[61];
		b[128]=(y[60]-y[61])*D4_2_3-a[128];

		y[56]=y[52]+y[54];
		y[57]=y[53]+y[55];
		y[60]=(y[52]-y[54])*D4_2_1;
		y[61]=(y[53]-y[55])*D4_2_2;

		y[62]=y[56]+y[57];
		y[63]=(y[56]-y[57])*D4_2_3;
		y[64]=y[60]+y[61];
		y[65]=(y[60]-y[61])*D4_2_3-y[64];

		a[192]=y[62];
		a[64]=y[64]-y[62];
		b[64]=y[62]-y[64]+y[63];
		b[192]=a[64]-y[63]+y[65];

		y[48]=y[40]+y[44];
		y[49]=y[41]+y[45];
		y[50]=y[42]+y[46];
		y[51]=y[43]+y[47];
		y[52]=(y[40]-y[44])*D8_2_1;
		y[53]=(y[41]-y[45])*D8_2_2;
		y[54]=(y[42]-y[46])*D8_2_3;
		y[55]=(y[43]-y[47])*D8_2_4;

		y[56]=y[48]+y[50];
		y[57]=y[49]+y[51];
		y[58]=(y[48]-y[50])*D4_2_1;
		y[59]=(y[49]-y[51])*D4_2_2;

		y[48]=y[56]+y[57];
		y[49]=(y[56]-y[57])*D4_2_3;
		y[50]=y[58]+y[59];
		y[51]=(y[58]-y[59])*D4_2_3-y[50];

		y[56]=y[52]+y[54];
		y[57]=y[53]+y[55];
		y[58]=(y[52]-y[54])*D4_2_1;
		y[59]=(y[53]-y[55])*D4_2_2;

		y[52]=y[56]+y[57];
		y[61]=(y[56]-y[57])*D4_2_3;
		y[62]=y[58]+y[59];
		y[63]=(y[58]-y[59])*D4_2_3-y[62];

		y[54]=y[62]-y[52];
		y[53]=y[52]-y[62]+y[61];
		y[55]=y[54]-y[61]+y[63];

		a[224]=y[48];
		a[160]=y[52]-y[48];
		a[96]=y[48]-y[52]+y[50];
		a[32]=a[160]-y[50]+y[54];
		b[32]=a[96]-y[54]+y[49];
		b[96]=a[32]-y[49]+y[53];
		b[160]=b[32]-y[53]+y[51];
		b[224]=b[96]-y[51]+y[55];

		y[32]=y[16]+y[24];
		y[33]=y[17]+y[25];
		y[34]=y[18]+y[26];
		y[35]=y[19]+y[27];
		y[36]=y[20]+y[28];
		y[37]=y[21]+y[29];
		y[38]=y[22]+y[30];
		y[39]=y[23]+y[31];
		y[40]=(y[16]-y[24])*D16_2_1;
		y[41]=(y[17]-y[25])*D16_2_2;
		y[42]=(y[18]-y[26])*D16_2_3;
		y[43]=(y[19]-y[27])*D16_2_4;
		y[44]=(y[20]-y[28])*D16_2_5;
		y[45]=(y[21]-y[29])*D16_2_6;
		y[46]=(y[22]-y[30])*D16_2_7;
		y[47]=(y[23]-y[31])*D16_2_8;

		y[48]=y[32]+y[36];
		y[49]=y[33]+y[37];
		y[50]=y[34]+y[38];
		y[51]=y[35]+y[39];
		y[52]=(y[32]-y[36])*D8_2_1;
		y[53]=(y[33]-y[37])*D8_2_2;
		y[54]=(y[34]-y[38])*D8_2_3;
		y[55]=(y[35]-y[39])*D8_2_4;

		y[56]=y[48]+y[50];
		y[57]=y[49]+y[51];
		y[58]=(y[48]-y[50])*D4_2_1;
		y[59]=(y[49]-y[51])*D4_2_2;

		y[32]=y[56]+y[57];
		y[33]=(y[56]-y[57])*D4_2_3;
		y[34]=y[58]+y[59];
		y[35]=(y[58]-y[59])*D4_2_3-y[34];

		y[56]=y[52]+y[54];
		y[57]=y[53]+y[55];
		y[58]=(y[52]-y[54])*D4_2_1;
		y[59]=(y[53]-y[55])*D4_2_2;

		y[36]=y[56]+y[57];
		y[61]=(y[56]-y[57])*D4_2_3;
		y[62]=y[58]+y[59];
		y[63]=(y[58]-y[59])*D4_2_3-y[62];

		y[38]=y[62]-y[36];
		y[37]=y[36]-y[62]+y[61];
		y[39]=y[38]-y[61]+y[63];

		y[48]=y[40]+y[44];
		y[49]=y[41]+y[45];
		y[50]=y[42]+y[46];
		y[51]=y[43]+y[47];
		y[52]=(y[40]-y[44])*D8_2_1;
		y[53]=(y[41]-y[45])*D8_2_2;
		y[54]=(y[42]-y[46])*D8_2_3;
		y[55]=(y[43]-y[47])*D8_2_4;

		y[56]=y[48]+y[50];
		y[57]=y[49]+y[51];
		y[58]=(y[48]-y[50])*D4_2_1;
		y[59]=(y[49]-y[51])*D4_2_2;

		y[48]=y[56]+y[57];
		y[49]=(y[56]-y[57])*D4_2_3;
		y[50]=y[58]+y[59];
		y[51]=(y[58]-y[59])*D4_2_3-y[50];

		y[56]=y[52]+y[54];
		y[57]=y[53]+y[55];
		y[58]=(y[52]-y[54])*D4_2_1;
		y[59]=(y[53]-y[55])*D4_2_2;

		y[52]=y[56]+y[57];
		y[61]=(y[56]-y[57])*D4_2_3;
		y[62]=y[58]+y[59];
		y[63]=(y[58]-y[59])*D4_2_3-y[62];

		y[54]=y[62]-y[52];
		y[53]=y[52]-y[62]+y[61];
		y[55]=y[54]-y[61]+y[63];

		y[40]=y[48];
		y[44]=y[52]-y[48];
		y[42]=y[48]-y[52]+y[50];
		y[46]=y[44]-y[50]+y[54];
		y[41]=y[42]-y[54]+y[49];
		y[45]=y[46]-y[49]+y[53];
		y[43]=y[41]-y[53]+y[51];
		y[47]=y[45]-y[51]+y[55];

		a[240]=y[32];
		a[208]=y[40]-y[32];
		a[176]=y[32]-y[40]+y[36];
		a[144]=a[208]-y[36]+y[44];
		a[112]=a[176]-y[44]+y[34];
		a[80]=a[144]-y[34]+y[42];
		a[48]=a[112]-y[42]+y[38];
		a[16]=a[80]-y[38]+y[46];
		b[16]=a[48]-y[46]+y[33];
		b[48]=a[16]-y[33]+y[41];
		b[80]=b[16]-y[41]+y[37];
		b[112]=b[48]-y[37]+y[45];
		b[144]=b[80]-y[45]+y[35];
		b[176]=b[112]-y[35]+y[43];
		b[208]=b[144]-y[43]+y[39];
		b[240]=b[176]-y[39]+y[47];
	}
	
}

//-------------------------------------------------------------------------------------------

void Subband::window(sample_t *b0,tint bo1,sample_t *samples)
{
	static const int step=2;
	
	{
		tint j,clip=0;
		sample_t *window  = m_decWindowA + (16+(16*0x20)) - bo1;
		sample_t *window2 = m_decWindowB + 16 - bo1;

		for(j=16;j;j--,b0+=0x10,samples+=step,window2+=0x20) 
		{
			sample_t sum;
			
			sum  = window2[0x0] * b0[0x0];
			sum += window2[0x1] * b0[0x1];
			sum += window2[0x2] * b0[0x2];
			sum += window2[0x3] * b0[0x3];
			sum += window2[0x4] * b0[0x4];
			sum += window2[0x5] * b0[0x5];
			sum += window2[0x6] * b0[0x6];
			sum += window2[0x7] * b0[0x7];
			sum += window2[0x8] * b0[0x8];
			sum += window2[0x9] * b0[0x9];
			sum += window2[0xA] * b0[0xA];
			sum += window2[0xB] * b0[0xB];
			sum += window2[0xC] * b0[0xC];
			sum += window2[0xD] * b0[0xD];
			sum += window2[0xE] * b0[0xE];
			sum += window2[0xF] * b0[0xF];
			
			if(sum > c_plusOneSample)
			{
				*samples = c_plusOneSample;
				clip++;
			}
			else if(sum < c_negOneSample)
			{
				*samples = c_negOneSample;
				clip++;
			}
			else
			{
				*samples = sum;
			}
		}

		{
			sample_t sum;
			sum  = window[0x0] * b0[0x0];
			sum += window[0x2] * b0[0x2];
			sum += window[0x4] * b0[0x4];
			sum += window[0x6] * b0[0x6];
			sum += window[0x8] * b0[0x8];
			sum += window[0xA] * b0[0xA];
			sum += window[0xC] * b0[0xC];
			sum += window[0xE] * b0[0xE];

			if(sum > c_plusOneSample)
			{
				*samples = c_plusOneSample;
				clip++;
			}
			else if(sum < c_negOneSample)
			{
				*samples = c_negOneSample;
				clip++;
			}
			else
			{
				*samples = sum;
			}
			b0-=0x10,window-=0x20,samples+=step;
		}
		window += bo1<<1;

		for(j=15;j;j--,b0-=0x10,window-=0x20,samples+=step)
		{
			sample_t sum;
			sum = -window[-0x1] * b0[0x0];
			sum -= window[-0x2] * b0[0x1];
			sum -= window[-0x3] * b0[0x2];
			sum -= window[-0x4] * b0[0x3];
			sum -= window[-0x5] * b0[0x4];
			sum -= window[-0x6] * b0[0x5];
			sum -= window[-0x7] * b0[0x6];
			sum -= window[-0x8] * b0[0x7];
			sum -= window[-0x9] * b0[0x8];
			sum -= window[-0xA] * b0[0x9];
			sum -= window[-0xB] * b0[0xA];
			sum -= window[-0xC] * b0[0xB];
			sum -= window[-0xD] * b0[0xC];
			sum -= window[-0xE] * b0[0xD];
			sum -= window[-0xF] * b0[0xE];
			sum -= window[-0x0] * b0[0xF];

			if(sum > c_plusOneSample)
			{
				*samples = c_plusOneSample;
				clip++;
			}
			else if(sum < c_negOneSample)
			{
				*samples = c_negOneSample;
				clip++;
			}
			else
			{
				*samples = sum;
			}
		}
	}
}

//-------------------------------------------------------------------------------------------
} // namespace blackomega
} // namespace engine
} // namespace orcus
//-------------------------------------------------------------------------------------------
