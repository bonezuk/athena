#include "engine/blackomega/inc/Hybrid.h"

//-------------------------------------------------------------------------------------------
namespace orcus
{
namespace engine
{
namespace blackomega
{
//-------------------------------------------------------------------------------------------

Hybrid::Hybrid() : m_alloc(),
	m_gr(0),
	m_grA(0),
	m_grB(0),
	m_prev(0),
	m_curGr(1)
{
	init();
}

//-------------------------------------------------------------------------------------------

Hybrid::~Hybrid()
{
	try
	{
		m_alloc.FreeAll();
	}
	catch(...) {}
}

//-------------------------------------------------------------------------------------------

void Hybrid::init()
{
	tint i;
	
	m_prev = reinterpret_cast<sample_t *>(m_alloc.MemAlloc(SBLIMIT * SSLIMIT,sizeof(sample_t)));
	for(i=0;i<(SBLIMIT * SSLIMIT);++i)
	{
		m_prev[i] = c_zeroSample;
	}

	// type 0
	for(i=0;i<36;++i)
	{
		m_win[0][i] = static_cast<sample_t>(sin((c_PI_D / 36.0) * (static_cast<tfloat64>(i) + 0.5)));
	}
	
	//type 1
	for(i=0;i<18;++i)
	{
		m_win[1][i] = static_cast<sample_t>(sin((c_PI_D / 36.0) * (static_cast<tfloat64>(i) + 0.5)));
	}
	for(i=18;i<24;++i)
	{
		m_win[1][i] = c_plusOneSample;
	}
	for(i=24;i<30;++i)
	{
		m_win[1][i] = static_cast<sample_t>(sin((c_PI_D / 12.0) * (static_cast<tfloat64>(i) + 0.5 - 18.0)));
	}
	for(i=30;i<36;++i)
	{
		m_win[1][i] = c_zeroSample;
	}

	//type 2
	for(i=0;i<12;++i)
	{
		m_win[2][i] = static_cast<sample_t>(sin((c_PI_D / 12.0) * (static_cast<tfloat64>(i) + 0.5)));
	}
	for(i=12;i<36;++i)
	{
		m_win[2][i] = c_zeroSample;
	}

	//type 3
	for(i=0;i<6;++i)
	{
		m_win[3][i] = c_zeroSample;
	}
	for(i=6;i<12;++i)
	{
		m_win[3][i] = static_cast<sample_t>(sin((c_PI_D / 12.0) * (static_cast<tfloat64>(i) + 0.5 - 6.0)));
	}
	for(i=12;i<18;++i)
	{
		m_win[3][i] = c_plusOneSample;
	}
	for(i=18;i<36;++i)
	{
		m_win[3][i] = static_cast<sample_t>(sin((c_PI_D / 36.0) * (static_cast<tfloat64>(i) + 0.5)));
	}
}

//-------------------------------------------------------------------------------------------

void Hybrid::set(GrInfoS *p,tint n)
{
	if(!n)
	{
		m_gr = p;
		m_grA = p;
	}
	else
	{
		m_grB = p;
	}
}

//-------------------------------------------------------------------------------------------

void Hybrid::transform(sample_t *in,sample_t *out,tint sb)
{
	tint i;
	sample_t *o = m_inv36Out,*p = &m_prev[sb * 18];
	
	invDCT(in,sb);
	for(i=0;i<18;++i)
	{
		out[i] = o[i] + p[i];
		p[i] = o[i + 18];
	}
}

//-------------------------------------------------------------------------------------------

void Hybrid::invDCT(sample_t *in,tint sb)
{
	tint i,j,k,bt;
	sample_t *out = m_inv36Out;
	
	bt = (m_gr->mixed_block_flag && sb<2) ? 0 : m_gr->block_type;
	
	for(i=0;i<36;++i)
	{
		out[i] = c_zeroSample;
	}
	
	if(bt==2)
	{
		for(i=0;i<3;++i)
		{
			dct12(&in[i],m_inv12Out);
			for(k=(6*i)+6,j=0;j<12;++j,++k)
			{
				out[k] += m_inv12Out[j] * m_win[bt][j];
			}
		}
	}
	else
	{
		dct36(in,out);
		
		for(i=0;i<36;++i)
		{
			out[i] *= m_win[bt][i];
		}
	}
}

//-------------------------------------------------------------------------------------------

void Hybrid::swap()
{
	switch(m_curGr)
	{
		case 0:
			m_gr = m_grB;
			m_curGr = 1;
			break;

		case 1:
			m_gr = m_grA;
			m_curGr = 0;
			break;
	}
}

//-------------------------------------------------------------------------------------------

void Hybrid::dct12(sample_t *x,sample_t *y)
{
	sample_t o[6];
	sample_t a[12];
	
	a[2]=x[15]+x[6];
	a[3]=x[12]+x[9];
	
	a[4]=COS_6_1*x[0];
	a[6]=-COS_6_1*(x[15]-x[6]);
	a[7]=COS_6_1*x[9];
	
	a[8]=COS_6_2*x[0];
	a[10]=COS_6_2*(x[15]+x[6]);
	a[11]=x[12]-COS_6_2*x[9];
	
	a[0]=x[0]-a[3];
	a[1]=x[3]-a[2];
	y[7]=(C_0_MINUS*a[0])+(C_1_MINUS*a[1]);
	y[1]=((C_2*a[0])+(C_3*a[1]))+y[7];

	a[0]=a[4]+a[7];
	o[2]=(C_0*a[0])+(C_1*a[6]);
	o[3]=((C_2*a[0])+(C_3*a[6]))-o[2];
	
	a[0]=a[8]+a[11];
	a[1]=-(x[3]+a[10]);
	o[4]=(C_0*a[0])+(C_1*a[1]);
	o[5]=((C_2*a[0])+(C_3*a[1]))-o[4];

	y[0]=o[2]-o[5];
	y[2]=o[4]-o[3];
	y[3]=-y[2];
	y[4]=-y[1];
	y[5]=-y[0];
	y[6]=-(o[4]+o[3]);
	y[8]=-(o[5]+o[2]);
	y[9]=y[8];
	y[10]=y[7];
	y[11]=y[6];
}

//-------------------------------------------------------------------------------------------

void Hybrid::dct36(sample_t *x,sample_t *y)
{
	sample_t a[44],o[20];
	
	a[0]=x[12]+x[4]+x[11]+x[3];
	a[1]=x[5]+x[2]+x[13]+x[10];
	a[2]=x[1]+x[9]+x[6]+x[17]+x[14];
	a[3]=x[16]+x[8]+x[15]+x[0]+x[7];

	a[36]=DCT36_2_1*x[1];
	a[37]=DCT36_2_1*x[16];
	a[38]=DCT36_1_1*x[1];
	a[39]=DCT36_1_1*x[16];
	a[40]=DCT36_1_7*x[10];
	a[41]=DCT36_1_7*x[7];
	a[42]=DCT36_2_7*x[10];
	a[43]=DCT36_2_7*x[7];
	
	a[4]=(DCT36_1_0*x[12])+(DCT36_1_4*x[4])+(DCT36_1_5*x[11])+(DCT36_1_8*x[3]);
	a[5]=(DCT36_1_0*x[5])+(DCT36_1_3*x[2])+a[40];
	a[6]=a[38]+(DCT36_1_2*x[9])+(DCT36_1_5*x[6])+(DCT36_1_6*x[17])+(DCT36_1_8*x[14]);
	a[7]=a[39]+(DCT36_1_2*x[8])+(DCT36_1_3*x[15])+(DCT36_1_6*x[0])+a[41];

	a[8]=(DCT36_2_0*x[12])+(DCT36_2_4*x[4])+(DCT36_2_5*x[11])+(DCT36_2_8*x[3]);
	a[9]=(DCT36_2_0*x[5])+(DCT36_2_3*x[2])-x[13]+a[42];
	a[10]=a[36]+(DCT36_2_2*x[9])+(DCT36_2_5*x[6])+(DCT36_2_6*x[17])+(DCT36_2_8*x[14]);
	a[11]=a[37]+(DCT36_2_2*x[8])+(DCT36_2_3*x[15])+(DCT36_2_6*x[0])+a[43];

	a[12]=(DCT36_3_0*x[12])+(DCT36_3_5*x[11])+(DCT36_3_8*x[3]);
	a[13]=(DCT36_3_0*x[5])+(DCT36_3_3*x[2])+(DCT36_3_4*x[13]);
	a[14]=(DCT36_3_2*x[9])+(DCT36_3_5*x[6])+(DCT36_3_6*x[17])+(DCT36_3_8*x[14]);
	a[15]=(DCT36_3_2*x[8])+(DCT36_3_3*x[15])+(DCT36_3_6*x[0]);
 
	a[16]=(DCT36_4_0*x[12])+(DCT36_4_4*x[4])+(DCT36_4_5*x[11])+(DCT36_4_8*x[3]);
	a[17]=(DCT36_4_0*x[5])+(DCT36_4_3*x[2])+x[13]-a[42];
	a[18]=(DCT36_4_2*x[9])+(DCT36_4_5*x[6])+(DCT36_4_6*x[17])+(DCT36_4_8*x[14])-a[36];
	a[19]=(DCT36_4_2*x[8])+(DCT36_4_3*x[15])+(DCT36_4_6*x[0])-a[43]-a[37];

	a[20]=(DCT36_5_0*x[12])+(DCT36_5_4*x[4])+(DCT36_5_5*x[11])+(DCT36_5_8*x[3]);
	a[21]=(DCT36_5_0*x[5])+(DCT36_5_3*x[2])-a[40];
	a[22]=(DCT36_5_2*x[9])+(DCT36_5_5*x[6])+(DCT36_5_6*x[17])+(DCT36_5_8*x[14])-a[38];
	a[23]=(DCT36_5_2*x[8])+(DCT36_5_3*x[15])+(DCT36_5_6*x[0])-a[41]-a[39];

	a[24]=(DCT36_6_0*x[12])+(DCT36_6_4*x[4])+(DCT36_6_5*x[11])+(DCT36_6_8*x[3]);
	a[25]=(DCT36_6_0*x[5])+(DCT36_6_3*x[2])-x[13]-x[10];
	a[26]=-x[1]+(DCT36_6_2*x[9])+(DCT36_6_5*x[6])+(DCT36_6_6*x[17])+(DCT36_6_8*x[14]);
	a[27]=-x[16]+(DCT36_6_2*x[8])+(DCT36_6_3*x[15])+(DCT36_6_6*x[0])-x[7];

	a[28]=(DCT36_7_0*x[12])+(DCT36_7_4*x[4])+(DCT36_7_5*x[11])+(DCT36_7_8*x[3]);
	a[29]=(DCT36_7_0*x[5])+(DCT36_7_3*x[2])-a[40];
	a[30]=(DCT36_7_2*x[9])+(DCT36_7_5*x[6])+(DCT36_7_6*x[17])+(DCT36_7_8*x[14])-a[38];
	a[31]=(DCT36_7_2*x[8])+(DCT36_7_3*x[15])+(DCT36_7_6*x[0])-a[41]-a[39];

	a[32]=(DCT36_8_0*x[12])+(DCT36_8_4*x[4])+(DCT36_8_5*x[11])+(DCT36_8_8*x[3]);
	a[33]=(DCT36_8_0*x[5])+(DCT36_8_3*x[2])+x[13]-a[42];
	a[34]=(DCT36_8_2*x[9])+(DCT36_8_5*x[6])+(DCT36_8_6*x[17])+(DCT36_8_8*x[14])-a[36];
	a[35]=(DCT36_8_2*x[8])+(DCT36_8_3*x[15])+(DCT36_8_6*x[0])-a[43]-a[37];

	o[0]=a[0]-a[3];
	o[1]=a[1]-a[2];
	o[2]=(C_0*o[0])+(C_1*o[1]);
	o[3]=(C_2*o[0])+(C_3*o[1])-o[2];
	
	o[0]=a[4]-a[7];
	o[1]=a[5]-a[6];
	o[4]=(C_0*o[0])+(C_1*o[1]);
	o[5]=(C_2*o[0])+(C_3*o[1])-o[4];
	
	o[0]=a[8]-a[11];
	o[1]=a[9]-a[10];
	o[6]=(C_0*o[0])+(C_1*o[1]);
	o[7]=(C_2*o[0])+(C_3*o[1])-o[6];
	
	o[0]=a[12]-a[15];
	o[1]=a[13]-a[14];
	o[8]=(C_0*o[0])+(C_1*o[1]);
	o[9]=(C_2*o[0])+(C_3*o[1])-o[8];
	
	o[0]=a[16]-a[19];
	o[1]=a[17]-a[18];
	o[10]=(C_0*o[0])+(C_1*o[1]);
	o[11]=(C_2*o[0])+(C_3*o[1])-o[10];
	
	o[0]=a[20]-a[23];
	o[1]=a[21]-a[22];
	o[12]=(C_0*o[0])+(C_1*o[1]);
	o[13]=(C_2*o[0])+(C_3*o[1])-o[12];
	
	o[0]=a[24]-a[27];
	o[1]=a[25]-a[26];
	o[14]=(C_0*o[0])+(C_1*o[1]);
	o[15]=(C_2*o[0])+(C_3*o[1])-o[14];
	
	o[0]=a[28]-a[31];
	o[1]=a[29]-a[30];
	o[16]=(C_0*o[0])+(C_1*o[1]);
	o[17]=(C_2*o[0])+(C_3*o[1])-o[16];

	o[0]=a[32]-a[35];
	o[1]=a[33]-a[34];
	o[18]=(C_0*o[0])+(C_1*o[1]);
	o[19]=(C_2*o[0])+(C_3*o[1])-o[18];
	
	y[0]=o[11]-o[12];
	y[1]=o[15]-o[8];
	y[2]=o[6]+o[17];
	y[14]=o[18]+o[5];
	y[3]=-y[14];
	y[13]=o[3];
	y[4]=-y[13];
	y[5]=o[4]+o[19];
	y[6]=o[17]-o[6];
	y[7]=o[9]-o[14];
	y[8]=o[11]+o[12];
	y[9]=-y[8];
	y[10]=-y[7];
	y[11]=-y[6];
	y[12]=-y[5];
	y[15]=-y[2];
	y[16]=-y[1];
	y[17]=-y[0];
	y[18]=-(o[10]+o[13]);
	y[19]=o[9]+o[14];
	y[20]=o[7]-o[16];
	y[21]=o[19]-o[4];
	y[22]=o[2];
	y[23]=o[18]-o[5];
	y[24]=-(o[7]+o[16]);
	y[25]=o[15]+o[8];
	y[26]=o[13]-o[10];
	y[27]=y[26];
	y[28]=y[25];
	y[29]=y[24];
	y[30]=y[23];
	y[31]=y[22];
	y[32]=y[21];
	y[33]=y[20];
	y[34]=y[19];
	y[35]=y[18];
}

//-------------------------------------------------------------------------------------------
} // namespace blackomega
} // namespace engine
} // namespace orcus
//-------------------------------------------------------------------------------------------
