#include "gtest/gtest.h"
#include "gmock/gmock.h"

#include "common/inc/CryptoRSAEncrypt.h"

using namespace orcus::common;
using namespace testing;

//-------------------------------------------------------------------------------------------

TEST(CryptoRSAEncrypt,publicKeyEncryption)
{
	static const tchar c_publicLicenseKey[]  = "<PublicKey bits=\"2048\" modulus=\"24432303453221621468467814630917494084301343144327244656369824253720318560137497077361973161121574986316336669681486839728864465622605458591989356428315471023507942726611272956815495799965250084162167363196038024862089542005303582638681087659972911364219391234706295092382517712539795715619177380762441251115048760267071690473890836355705819951728178726492648632541029512051466658956331531212765613615326971900270628545791850012846364914053801239071955589059019388253916614928347349160187680112034300096235827794723286709383923512161728955796117341340291880824765392289587634562853102789826157934303736737024182909937\" exponent=\"65537\"></PublicKey>";
	static const tchar c_privateLicenseKey[] = "<PrivateKey bits=\"2048\" exponent=\"22664105102997623564612849576147796441109844135621565095127135750502358157147855369045635234405374516961645658126193004478028996186286773115055631699696518690253473154425831639175446719610104423708055032701221228977003396808984634678669729209460200703058633607317004193757767090592250800850699142256616162172044275848658235178127037517505034439293884061644881357747851155858542657275261368543660939744676770844993913969260161904744033265715243563561723337209911583055188875551005806147068566832829852991966436956070188338855290483350284037068470316103872271274908805711356263233654237189373781265407757136850245282633\" primeA=\"159295095865512126216436861234653321045763893776406323259313858508527857559270978625750007214557309822374659134131310459809066058868197389853795267815201324636599661929324003384979646998346331549609794559089725047564253028998257163212264394873394470123916020223939220476525195781259742379915184247922244283827\" primeB=\"153377624844452538072931293913094418819348086852825038782638093232689268057441440335051481519253697823720127391010422259370000961722763479689182751899376582242709042070539161193498774559831172225697909098548126698442377125145779833881409627940406687232354152144189792782515067868519873086529418701594050921931\" primeExponentA=\"25322128091412565892897740518220521211754707193838611406007778475393185834757237214444719397611395909631188471540961477795609353514638759898940126952694926531029727909115422849149609570605491281014310080055491639005819431101573815193636731400445909787615501147336600682430375049959015458656276446814073591237\" primeExponentB=\"41297306376630140025252080693203291491618724393929393081136332044250344448809247541881966566805785309021855866789293241815204189550328583282654360743036745201257972692932756128911597660600589973521297953110155236289640764000830537691248520601132435157271791030049789942174052636036157902938769281601669630413\" coefficient=\"119105092825994117035739350794685960361755268616836432380015891851643650544957998662851276105501774265758611335393157770536376307635278336886472866472626605895483936283951916694813049359917912770974229702209882661472996890827083551645676959537284010358320925356171625487222911777204729595983392593952736757711\"></PrivateKey>";
	
	QString publicKeyXml = QString::fromUtf8(c_publicLicenseKey);
	QString privateKeyXml = QString::fromUtf8(c_privateLicenseKey);
	
	CryptoRSAEncrypt cryptoA,cryptoB;
	fprintf(stdout,"publicKeyEncryption - 1\n");
	
	EXPECT_TRUE(cryptoA.readPublicKeyXML(publicKeyXml));
	fprintf(stdout,"publicKeyEncryption - 2\n");
	
    EXPECT_TRUE(cryptoB.readPublicKeyXML(publicKeyXml));
    fprintf(stdout,"publicKeyEncryption - 3\n");
    EXPECT_TRUE(cryptoB.readPrivateKeyXML(privateKeyXml));
    fprintf(stdout,"publicKeyEncryption - 4\n");

    QString testString = "This is the test string that is used to test the RSA 2048-bit public key encryption algorithm";
	QByteArray inArray = testString.toUtf8();
	fprintf(stdout,"publicKeyEncryption - 5\n");
	
	QByteArray encArray = cryptoA.encrypt(inArray);
	fprintf(stdout,"publicKeyEncryption - 6\n");
    EXPECT_FALSE(encArray.isEmpty());
    fprintf(stdout,"publicKeyEncryption - 7\n");
	
	QByteArray unencArray = cryptoB.decrypt(encArray);
	fprintf(stdout,"publicKeyEncryption - 8\n");
	EXPECT_FALSE(unencArray.isEmpty());
	fprintf(stdout,"publicKeyEncryption - 9\n");
	
	QString unencString = QString::fromUtf8(unencArray.constData(),unencArray.size());
	fprintf(stdout,"publicKeyEncryption - 10\n");
	
	EXPECT_TRUE(testString==unencString);
	fprintf(stdout,"publicKeyEncryption - 11\n");
}

//-------------------------------------------------------------------------------------------

TEST(CryptoRSAEncrypt,publicKeyDigitalSignature)
{
    static const tchar c_publicLicenseKey[]  = "<PublicKey bits=\"2048\" modulus=\"24432303453221621468467814630917494084301343144327244656369824253720318560137497077361973161121574986316336669681486839728864465622605458591989356428315471023507942726611272956815495799965250084162167363196038024862089542005303582638681087659972911364219391234706295092382517712539795715619177380762441251115048760267071690473890836355705819951728178726492648632541029512051466658956331531212765613615326971900270628545791850012846364914053801239071955589059019388253916614928347349160187680112034300096235827794723286709383923512161728955796117341340291880824765392289587634562853102789826157934303736737024182909937\" exponent=\"65537\"></PublicKey>";
    static const tchar c_privateLicenseKey[] = "<PrivateKey bits=\"2048\" exponent=\"22664105102997623564612849576147796441109844135621565095127135750502358157147855369045635234405374516961645658126193004478028996186286773115055631699696518690253473154425831639175446719610104423708055032701221228977003396808984634678669729209460200703058633607317004193757767090592250800850699142256616162172044275848658235178127037517505034439293884061644881357747851155858542657275261368543660939744676770844993913969260161904744033265715243563561723337209911583055188875551005806147068566832829852991966436956070188338855290483350284037068470316103872271274908805711356263233654237189373781265407757136850245282633\" primeA=\"159295095865512126216436861234653321045763893776406323259313858508527857559270978625750007214557309822374659134131310459809066058868197389853795267815201324636599661929324003384979646998346331549609794559089725047564253028998257163212264394873394470123916020223939220476525195781259742379915184247922244283827\" primeB=\"153377624844452538072931293913094418819348086852825038782638093232689268057441440335051481519253697823720127391010422259370000961722763479689182751899376582242709042070539161193498774559831172225697909098548126698442377125145779833881409627940406687232354152144189792782515067868519873086529418701594050921931\" primeExponentA=\"25322128091412565892897740518220521211754707193838611406007778475393185834757237214444719397611395909631188471540961477795609353514638759898940126952694926531029727909115422849149609570605491281014310080055491639005819431101573815193636731400445909787615501147336600682430375049959015458656276446814073591237\" primeExponentB=\"41297306376630140025252080693203291491618724393929393081136332044250344448809247541881966566805785309021855866789293241815204189550328583282654360743036745201257972692932756128911597660600589973521297953110155236289640764000830537691248520601132435157271791030049789942174052636036157902938769281601669630413\" coefficient=\"119105092825994117035739350794685960361755268616836432380015891851643650544957998662851276105501774265758611335393157770536376307635278336886472866472626605895483936283951916694813049359917912770974229702209882661472996890827083551645676959537284010358320925356171625487222911777204729595983392593952736757711\"></PrivateKey>";

    QString publicKeyXml = QString::fromUtf8(c_publicLicenseKey);
    QString privateKeyXml = QString::fromUtf8(c_privateLicenseKey);

    CryptoRSAEncrypt cryptoA,cryptoB;

    EXPECT_TRUE(cryptoA.readPublicKeyXML(publicKeyXml));

    EXPECT_TRUE(cryptoB.readPublicKeyXML(publicKeyXml));
    EXPECT_TRUE(cryptoB.readPrivateKeyXML(privateKeyXml));

    QString testString = "This is the test string that is used to test the RSA 2048-bit public key encryption algorithm";
    QByteArray inArray = testString.toUtf8();

    QByteArray encArray = cryptoB.publicEncrypt(inArray);
    EXPECT_FALSE(encArray.isEmpty());

    QByteArray unencArray = cryptoA.publicDecrypt(encArray);
    EXPECT_FALSE(unencArray.isEmpty());

    QString unencString = QString::fromUtf8(unencArray.constData(),unencArray.size());

    EXPECT_TRUE(testString==unencString);
}

//-------------------------------------------------------------------------------------------
