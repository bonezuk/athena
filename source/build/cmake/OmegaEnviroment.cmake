# Library extensions

if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	set(OMEGA_WIN32 TRUE)
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	set(OMEGA_MACOSX TRUE)
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	set(OMEGA_LINUX TRUE)
else (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	message(FATAL_ERROR "Unsupported Operating System")
endif (${CMAKE_SYSTEM_NAME} MATCHES "Windows")

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
	set(OMEGA_IS64BIT TRUE)
else (CMAKE_SIZEOF_VOID_P EQUAL 8)
	set(OMEGA_IS64BIT FALSE)
endif (CMAKE_SIZEOF_VOID_P EQUAL 8)

set(TIGER_DEBUG_BUILD TRUE CACHE BOOL "Create Debug Build")
set(TIGER_DEBUG_PLAYBACK_LOG TRUE CACHE BOOL "Log Playback Debug Messages")
if (${OMEGA_MACOSX})
	set(TIGER_MAC_STORE TRUE CACHE BOOL "Apple Mac Store Build")
	if (${TIGER_MAC_STORE})
		add_definitions(-DOMEGA_MAC_STORE)
	endif (${TIGER_MAC_STORE})
	set(OMEGA_IS_MACOSX_ARM TRUE CACHE BOOL "Apple ARM Build")
endif (${OMEGA_MACOSX})

if (${OMEGA_LINUX})
	set(TIGER_LINUX_DISTRO TRUE CACHE BOOL "Use distro's install paths bin, lib instead of UTILs dir")
endif (${OMEGA_LINUX})

if (TIGER_DEBUG_BUILD)
	set(CMAKE_BUILD_TYPE "Debug")
	add_definitions(-DOMEGA_DEBUG)
else (TIGER_DEBUG_BUILD)
	set(CMAKE_BUILD_TYPE "Release")
endif (TIGER_DEBUG_BUILD)
set(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE})

message( "MSVC version ${MSVC_VERSION}")

if (MSVC_VERSION GREATER_EQUAL 1200 AND MSVC_VERSION LESS 1300)
	message("Set MSVC12")
	set(OMEGA_MSVC12 TRUE)
	set(OMEGA_MSVC16 FALSE)
elseif (MSVC_VERSION GREATER_EQUAL 1900 AND MSVC_VERSION LESS 1930)
	message("Set MSVC16")
	set(OMEGA_MSVC16 TRUE)
	set(OMEGA_MSVC12 FALSE)
elseif (${CMAKE_GENERATOR} MATCHES "NMake Makefiles")
	message("Set MSVC16 for nmake")
	set(OMEGA_MSVC16 TRUE)
	set(OMEGA_MSVC12 FALSE)
else (MSVC_VERSION GREATER_EQUAL 1200 AND MSVC_VERSION LESS 1300)
	message("No MSVC")
	set(OMEGA_MSVC12 FALSE)
	set(OMEGA_MSVC16 FALSE)
endif (MSVC_VERSION GREATER_EQUAL 1200 AND MSVC_VERSION LESS 1300)

if (OMEGA_MSVC12 OR OMEGA_MSVC16)
	add_definitions(/bigobj)
endif (OMEGA_MSVC12 OR OMEGA_MSVC16)

if (OMEGA_WIN32)
	set(LIBEXT "dll")
elseif (OMEGA_MACOSX)
	set(LIBEXT "dylib")
elseif (OMEGA_LINUX)
	set(LIBEXT "so")
endif (OMEGA_WIN32)

if (OMEGA_WIN32)
	if (OMEGA_IS64BIT)
		set(TIGER_PLATFORM "WIN64")
	else (OMEGA_IS64BIT)
		set(TIGER_PLATFORM "WIN32")
	endif (OMEGA_IS64BIT)
	if (OMEGA_MSVC12)
		set(TIGER_COMPILER "VC12")
	elseif (OMEGA_MSVC16)
		set(TIGER_COMPILER "VC16")
		add_definitions(-DOMEGA_MSVC16)
		add_definitions(-D_SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING)
	else (OMEGA_MSVC12)
		set(TIGER_COMPILER "VC9")
	endif (OMEGA_MSVC12)
elseif (OMEGA_MACOSX)
	if (OMEGA_IS_MACOSX_ARM)
		set(TIGER_PLATFORM "Mac64.ARM")
	else (OMEGA_IS_MACOSX_ARM)
		set(TIGER_PLATFORM "Mac64")
	endif (OMEGA_IS_MACOSX_ARM)
	set(TIGER_COMPILER "GCC4.0")
elseif (OMEGA_LINUX)
	set(TIGER_PLATFORM "Linux")
	set(TIGER_COMPILER "GCC4.0")
endif (OMEGA_WIN32)

if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
	set(TIGER_BUILD_TYPE "DEBUG")
	if (TIGER_DEBUG_PLAYBACK_LOG)
		add_definitions(-DOMEGA_PLAYBACK_DEBUG_MESSAGES)
	endif (TIGER_DEBUG_PLAYBACK_LOG)
else (${CMAKE_BUILD_TYPE} MATCHES "Debug")
	set(TIGER_BUILD_TYPE "OPT")
endif (${CMAKE_BUILD_TYPE} MATCHES "Debug")

set(BUILD_SUFFIX ${TIGER_PLATFORM}.${TIGER_BUILD_TYPE}.${TIGER_COMPILER})

if (${TIGER_LINUX_DISTRO})
	set(ATHENA_UTILS "${CMAKE_SYSROOT}" CACHE PATH "System root for Third Party Utilities Library Path")
else (${TIGER_LINUX_DISTRO})
	if ("$ENV{ATHENA_UTILS}" STREQUAL "")
		set(ATHENA_UTILS "${ROOT_PROJECT_PATH}/../athena_utils" CACHE PATH "Third Party Utilities Library Path")
	else ("$ENV{ATHENA_UTILS}" STREQUAL "")
		set(ATHENA_UTILS "$ENV{ATHENA_UTILS}" CACHE PATH "Perforce Library Path")
	endif ("$ENV{ATHENA_UTILS}" STREQUAL "")
endif (${TIGER_LINUX_DISTRO})

if (OMEGA_WIN32)
	add_definitions(-DOMEGA_WIN32)
	add_definitions(-DNOMINMAX)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
elseif (OMEGA_MACOSX)
	add_definitions(-DOMEGA_MACOSX)
	add_compile_options(-Wignored-attributes)
	add_compile_options(-Wextra-tokens)
	set(CMAKE_MACOSX_RPATH 0)	
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++ -std=c++11")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++")
	set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
elseif (OMEGA_LINUX)
	add_definitions(-DOMEGA_LINUX)
	add_definitions(-DSINGLE_FLOAT_SAMPLE)
	add_compile_options(-Wno-psabi)
	add_compile_options(-Wunused-result)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -O2")
endif (OMEGA_WIN32)

include_directories(AFTER "${ROOT_PROJECT_PATH}/source" )
include_directories(AFTER "${CMAKE_BINARY_DIR}/source" )

if (OMEGA_WIN32)
	add_library(wbemuuid SHARED IMPORTED)
	set_property(TARGET wbemuuid PROPERTY IMPORTED_IMPLIB wbemuuid.lib)
	add_library(iphlpapi SHARED IMPORTED)
	set_property(TARGET iphlpapi PROPERTY IMPORTED_IMPLIB iphlpapi.lib)
	add_library(winmm SHARED IMPORTED)
	set_property(TARGET winmm PROPERTY IMPORTED_IMPLIB winmm.lib)
elseif (OMEGA_MACOSX)
	find_library(COCOA_FRAMEWORK_UNIT Cocoa)
	find_library(FOUNDATION_FRAMEWORK_UNIT Foundation)
	find_library(CORESERVICES_FRAMEWORK_UNIT CoreServices)
	find_library(COREAUDIO_FRAMEWORK_UNIT CoreAudio)
	find_library(AUDIOUNIT_FRAMEWORK_UNIT AudioUnit)
	find_library(AUDIOTOOLBOX_FRAMEWORK_UNIT AudioToolbox)
	find_library(APPKIT_FRAMEWORK_UNIT AppKit)
	find_library(IOKIT_FRAMEWORK_UNIT IOKit)
	find_library(URLTYPE_FRAMEWORK_UNIT UniformTypeIdentifiers)
elseif (OMEGA_LINUX)
	include(FindALSA)
	set(THREADS_PREFER_PTHREAD_FLAG TRUE)
	find_package(Threads REQUIRED)
endif (OMEGA_WIN32)
