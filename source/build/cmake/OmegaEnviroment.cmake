# Library extensions

if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	set(OMEGA_WIN32 TRUE)
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	set(OMEGA_MACOSX TRUE)
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	set(OMEGA_LINUX TRUE)
else (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	message(FATAL_ERROR "Unsupported Operating System")
endif (${CMAKE_SYSTEM_NAME} MATCHES "Windows")

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
	set(OMEGA_IS64BIT TRUE)
else (CMAKE_SIZEOF_VOID_P EQUAL 8)
	set(OMEGA_IS64BIT FALSE)
endif (CMAKE_SIZEOF_VOID_P EQUAL 8)

set(TIGER_DEBUG_BUILD TRUE CACHE BOOL "Create Debug Build")
set(TIGER_DEBUG_PLAYBACK_LOG TRUE CACHE BOOL "Log Playback Debug Messages")
set(TIGER_MAC_STORE TRUE CACHE BOOL "Apple Mac Store Build")
set(TIGER_RASPBIAN_BUILD FALSE CACHE BOOL "Cross-compile build for Raspbian")

if (${TIGER_DEBUG_BUILD})
	set(CMAKE_BUILD_TYPE "Debug")
	add_definitions(-DOMEGA_DEBUG)
else (${TIGER_DEBUG_BUILD})
	set(CMAKE_BUILD_TYPE "Release")
endif (${TIGER_DEBUG_BUILD})
set(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE})

if (${TIGER_MAC_STORE})
	add_definitions(-DOMEGA_MAC_STORE)
endif (${TIGER_MAC_STORE})

if (MSVC12)
	set(OMEGA_MSVC12 TRUE)
elseif (${CMAKE_GENERATOR} MATCHES "NMake Makefiles")
	message("Set MSVC12")
	set(OMEGA_MSVC12 TRUE)
else (MSVC12)
	set(OMEGA_MSVC12 FALSE)
endif (MSVC12)

if (OMEGA_WIN32)
	set(LIBEXT "dll")
elseif (OMEGA_MACOSX)
	set(LIBEXT "dylib")
elseif (OMEGA_LINUX)
	set(LIBEXT "so")
endif (OMEGA_WIN32)

set( OMEGA_LIBRARIES audioio daemon blackomega blueomega common cyanomega dlna engine greenomega http mime toneomega network_omega redomega remote rtp rtp_silveromega silveromega trackdb trackinfo violetomega whiteomega widget xml2 )

if (OMEGA_LINUX AND ${TIGER_RASPBIAN_BUILD})
	INCLUDE(CMakeForceCompiler)

	# Set OS and processor architecture
	set(CMAKE_SYSTEM_NAME Linux)
	set(CMAKE_SYSTEM_PROCESSOR arm)
	set(CMAKE_SYSTEM_VERSION 1)

	set(TIGER_RASPBIAN_TOOLCHAIN "~/Disk/RPi/rsapi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64" CACHE PATH "Sysroot Path")

	# Specify the compilers
	set(CMAKE_C_COMPILER "${TIGER_RASPBIAN_TOOLCHAIN}/bin/arm-linux-gnueabihf-gcc")
	set(CMAKE_CXX_COMPILER "${TIGER_RASPBIAN_TOOLCHAIN}/bin/arm-linux-gnueabihf-g++")
	
	set(TIGER_RASPBIAN_SYSROOT "~/Disk/RPi/rsapi/sysroot" CACHE PATH "Sysroot Path")
	set(CMAKE_SYSROOT ${TIGER_RASPBIAN_SYSROOT})
		
	# where is the target environment
	set(CMAKE_FIND_ROOT_PATH ${TIGER_RASPBIAN_TOOLCHAIN})

	# search for programs in the build host directories
	set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)

	# for libraries and headers in the target directories
	set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
	set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
	
else (OMEGA_LINUX AND ${TIGER_RASPBIAN_BUILD})
	list( APPEND OMEGA_LIBRARIES wavpackomega wavpack )
endif (OMEGA_LINUX AND ${TIGER_RASPBIAN_BUILD})

if (OMEGA_WIN32)
	if (OMEGA_IS64BIT)
		set(TIGER_PLATFORM "WIN64")
	else (OMEGA_IS64BIT)
		set(TIGER_PLATFORM "WIN32")
	endif (OMEGA_IS64BIT)
	if (OMEGA_MSVC12)
		set(TIGER_COMPILER "VC12")
	else (OMEGA_MSVC12)
		set(TIGER_COMPILER "VC9")
	endif (OMEGA_MSVC12)
	add_compile_options(-bigobj)
elseif (OMEGA_MACOSX)
	set(TIGER_PLATFORM "Mac64")
	set(TIGER_COMPILER "GCC4.0")
elseif (OMEGA_LINUX)
	if (${TIGER_RASPBIAN_BUILD})
		set(TIGER_PLATFORM "RPi2")
	else (${TIGER_RASPBIAN_BUILD})
		set(TIGER_PLATFORM "Linux")
	endif (${TIGER_RASPBIAN_BUILD})
	set(TIGER_COMPILER "GCC4.0")
endif (OMEGA_WIN32)

if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
	set(TIGER_BUILD_TYPE "DEBUG")
	if (TIGER_DEBUG_PLAYBACK_LOG)
		add_definitions(-DOMEGA_PLAYBACK_DEBUG_MESSAGES)
	endif (TIGER_DEBUG_PLAYBACK_LOG)
else (${CMAKE_BUILD_TYPE} MATCHES "Debug")
	set(TIGER_BUILD_TYPE "OPT")
endif (${CMAKE_BUILD_TYPE} MATCHES "Debug")

set(BUILD_SUFFIX ${TIGER_PLATFORM}.${TIGER_BUILD_TYPE}.${TIGER_COMPILER})

if ("$ENV{ATHENA_UTILS}" STREQUAL "")
	set(ATHENA_UTILS "${ROOT_PROJECT_PATH}/../athena_utils" CACHE PATH "Third Party Utilities Library Path")
else ("$ENV{ATHENA_UTILS}" STREQUAL "")
	set(ATHENA_UTILS "$ENV{ATHENA_UTILS}" CACHE PATH "Third Party Utilities Library Path")
endif ("$ENV	{ATHENA_UTILS}" STREQUAL "")

if (OMEGA_WIN32)
	add_definitions(-DOMEGA_WIN32)
	add_definitions(-DNOMINMAX)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
elseif (OMEGA_MACOSX)
	add_definitions(-DOMEGA_MACOSX)
	add_compile_options(-Wignored-attributes)
	add_compile_options(-Wextra-tokens)
	set(CMAKE_MACOSX_RPATH 0)	
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++ -std=c++11")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++")
	set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
elseif (OMEGA_LINUX)
	add_definitions(-DOMEGA_LINUX)
	add_definitions(-std=c++11)
endif (OMEGA_WIN32)

include_directories(AFTER "${ROOT_PROJECT_PATH}/source" )
include_directories(AFTER "${CMAKE_BINARY_DIR}/source" )

if (OMEGA_WIN32)
	add_library(wbemuuid SHARED IMPORTED)
	set_property(TARGET wbemuuid PROPERTY IMPORTED_IMPLIB wbemuuid.lib)
	add_library(iphlpapi SHARED IMPORTED)
	set_property(TARGET iphlpapi PROPERTY IMPORTED_IMPLIB iphlpapi.lib)
	add_library(winmm SHARED IMPORTED)
	set_property(TARGET winmm PROPERTY IMPORTED_IMPLIB winmm.lib)
elseif (OMEGA_MACOSX)
	find_library(COCOA_FRAMEWORK_UNIT Cocoa)
	find_library(FOUNDATION_FRAMEWORK_UNIT Foundation)
	find_library(CORESERVICES_FRAMEWORK_UNIT CoreServices)
	find_library(COREAUDIO_FRAMEWORK_UNIT CoreAudio)
	find_library(AUDIOUNIT_FRAMEWORK_UNIT AudioUnit)
	find_library(AUDIOTOOLBOX_FRAMEWORK_UNIT AudioToolbox)
	find_library(APPKIT_FRAMEWORK_UNIT AppKit)
	find_library(IOKIT_FRAMEWORK_UNIT IOKit)
elseif (OMEGA_LINUX)
	
	include(FindALSA)
		
endif (OMEGA_WIN32)
